@page "/parser"
@inject HttpClient Http
@inject NavigationManager NavMag
@namespace OmoriDialogueParser

<InputFile OnChange="@LoadFiles"/>
<div id="textboxes">
    @if (fileMessages.Count() > 0)
    {
        <h2 class="heading">
            <span class="fake-link">
                @fileName
            </span>
        </h2>
        foreach (var message in fileMessages)
        {
            <Dialogue Message="@message" Parsed=true>
            </Dialogue>
        }

    }
    else
    {
        <div style="color: red">@errMessage</div>
    }
</div>
@code {
    private string fileName = string.Empty;
    private ExportMessage[] fileMessages = new ExportMessage[] { };
    private string errMessage = string.Empty;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        using Stream yamlStream = e.File.OpenReadStream(maxAllowedSize: long.MaxValue);
        errMessage = string.Empty;
        string yamlFile = await new StreamReader(yamlStream).ReadToEndAsync();
        fileName = e.File.Name;
        var system = (await Http.GetFromJsonAsync<Model.SystemData>("text/System.json"))!;
        try
        {
            var languageFile = YamlInterpreter.Parse(new StringReader(yamlFile), system);

            if (languageFile == null)
            {
                Console.WriteLine($"   -> {e.File.Name} was empty!");
            }
            else
            {
                fileMessages = languageFile.Messages.Select(languageFileMessage => new ExportMessage
                {
                    Html = languageFileMessage.Value.Text.ToHtml(),
                    Speaker = languageFileMessage.Value.Text.GetSpeaker(),
                    Background = languageFileMessage.Value.Background,
                    FaceIndex = languageFileMessage.Value.Faceindex,
                    FaceSet = languageFileMessage.Value.Faceset
                }).ToArray();
            }

        }
        catch (Exception ex)
        {
            errMessage = ex.Message;
        }
	}
}
